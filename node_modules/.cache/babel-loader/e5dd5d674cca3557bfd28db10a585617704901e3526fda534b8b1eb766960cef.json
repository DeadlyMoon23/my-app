{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.dev/api';\n    this._imageBase = 'https://starwars-visualguide.com/assets/img';\n    this.getResource = async url => {\n      const res = await fetch(`${this._apiBase}${url}`);\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n      }\n      return await res.json();\n    };\n    this.getAllPeople = async () => {\n      const res = await this.getResource(`/people/`);\n      return res.results.map(this._transformPerson);\n    };\n    this.getPerson = async id => {\n      let person = await this.getResource(`/people/${id}/`);\n      person = this._transformPerson(person);\n      person.homeworld = await this._transformHomeworld(person.homeworld);\n      return person;\n    };\n    this.getAllPlanets = async () => {\n      const res = await this.getResource(`/planets/`);\n      return res.results.map(this._transformPlanet).slice(1);\n    };\n    this.getPlanet = async id => {\n      const planet = await this.getResource(`/planets/${id}/`);\n      return this._transformPlanet(planet);\n    };\n    this.getAllStarships = async () => {\n      const res = await this.getResource(`/starships/`);\n      return res.results.map(this._transformStarship).slice(2, -1);\n    };\n    this.getStarship = async id => {\n      const starship = await this.getResource(`/starships/${id}/`);\n      return this._transformStarship(starship);\n    };\n    this.getPersonImage = ({\n      id\n    }) => {\n      return `${this._imageBase}/characters/${id}.jpg`;\n    };\n    this.getStarshipImage = ({\n      id\n    }) => {\n      return `${this._imageBase}/starships/${id}.jpg`;\n    };\n    this.getPlanetImage = ({\n      id\n    }) => {\n      return `${this._imageBase}/planets/${id}.jpg`;\n    };\n    this._extractId = item => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      return item.url.match(idRegExp)[1];\n    };\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter,\n        climate: planet.climate,\n        terrain: planet.terrain,\n        type: \"planet\"\n      };\n    };\n    this._transformStarship = starship => {\n      return {\n        id: this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.cost_in_credits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargo_capacity,\n        type: \"starship\"\n      };\n    };\n    this._transformPerson = person => {\n      return {\n        id: this._extractId(person),\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birth_year,\n        eyeColor: person.eye_color,\n        hairColor: person.hair_color,\n        mass: person.mass,\n        height: person.height,\n        homeworld: person.homeworld,\n        type: \"person\"\n      };\n    };\n    this._transformHomeworld = async url => {\n      const idRegExp = /\\/([0-9]*)\\/$/;\n      const planetId = url.match(idRegExp)[1];\n      const planet = await this.getResource(`/planets/${planetId}/`);\n      return await planet.name;\n    };\n  }\n}","map":{"version":3,"names":["SwapiService","constructor","_apiBase","_imageBase","getResource","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPerson","getPerson","id","person","homeworld","_transformHomeworld","getAllPlanets","_transformPlanet","slice","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","getPersonImage","getStarshipImage","getPlanetImage","_extractId","item","idRegExp","match","name","population","rotationPeriod","rotation_period","diameter","climate","terrain","type","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color","hairColor","hair_color","mass","height","planetId"],"sources":["C:/Users/User/Desktop/React_project 2/my-app/src/components/services/swapi-service.js"],"sourcesContent":["export default class SwapiService {\r\n\r\n    _apiBase = 'https://swapi.dev/api'\r\n    _imageBase = 'https://starwars-visualguide.com/assets/img'\r\n\r\n    getResource = async (url) => {\r\n        const res = await fetch(`${this._apiBase}${url}`)\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}` +\r\n                `, received ${res.status}`)\r\n        }\r\n        return await res.json()\r\n    }\r\n\r\n    getAllPeople = async () => {\r\n        const res = await this.getResource(`/people/`)\r\n        return res.results.map(this._transformPerson)\r\n    }\r\n\r\n    getPerson = async (id) => {\r\n        let person = await this.getResource(`/people/${id}/`)\r\n        person = this._transformPerson(person)\r\n        person.homeworld = await this._transformHomeworld(person.homeworld)\r\n\r\n        return person\r\n    }\r\n\r\n    getAllPlanets = async () => {\r\n        const res = await this.getResource(`/planets/`)\r\n        return res.results.map(this._transformPlanet).slice(1)\r\n    }\r\n\r\n    getPlanet = async (id) => {\r\n        const planet = await this.getResource(`/planets/${id}/`)\r\n        return this._transformPlanet(planet)\r\n    }\r\n\r\n    getAllStarships = async () => {\r\n        const res = await this.getResource(`/starships/`)\r\n        return res.results.map(this._transformStarship).slice(2, -1)\r\n    }\r\n\r\n    getStarship = async (id) => {\r\n        const starship = await this.getResource(`/starships/${id}/`)\r\n        return this._transformStarship(starship)\r\n    }\r\n\r\n    getPersonImage = ({ id }) => {\r\n        return `${this._imageBase}/characters/${id}.jpg`\r\n    }\r\n\r\n    getStarshipImage = ({ id }) => {\r\n        return `${this._imageBase}/starships/${id}.jpg`\r\n    }\r\n\r\n    getPlanetImage = ({ id }) => {\r\n        return `${this._imageBase}/planets/${id}.jpg`\r\n    }\r\n\r\n    _extractId = (item) => {\r\n        const idRegExp = /\\/([0-9]*)\\/$/\r\n        return item.url.match(idRegExp)[1]\r\n    }\r\n\r\n    _transformPlanet = (planet) => {\r\n        return {\r\n            id: this._extractId(planet),\r\n            name: planet.name,\r\n            population: planet.population,\r\n            rotationPeriod: planet.rotation_period,\r\n            diameter: planet.diameter,\r\n            climate: planet.climate,\r\n            terrain: planet.terrain,\r\n            type: \"planet\"\r\n        };\r\n    }\r\n\r\n    _transformStarship = (starship) => {\r\n        return {\r\n            id: this._extractId(starship),\r\n            name: starship.name,\r\n            model: starship.model,\r\n            manufacturer: starship.manufacturer,\r\n            costInCredits: starship.cost_in_credits,\r\n            length: starship.length,\r\n            crew: starship.crew,\r\n            passengers: starship.passengers,\r\n            cargoCapacity: starship.cargo_capacity,\r\n            type: \"starship\"\r\n        }\r\n    }\r\n\r\n    _transformPerson = (person) => {\r\n        return {\r\n            id: this._extractId(person),\r\n            name: person.name,\r\n            gender: person.gender,\r\n            birthYear: person.birth_year,\r\n            eyeColor: person.eye_color,\r\n            hairColor: person.hair_color,\r\n            mass: person.mass,\r\n            height: person.height,\r\n            homeworld: person.homeworld,\r\n            type: \"person\"\r\n        }\r\n    }\r\n\r\n    _transformHomeworld = async (url) => {\r\n        const idRegExp = /\\/([0-9]*)\\/$/;\r\n        const planetId = url.match(idRegExp)[1]\r\n\r\n        const planet = await this.getResource(`/planets/${planetId}/`);\r\n        return await planet.name\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
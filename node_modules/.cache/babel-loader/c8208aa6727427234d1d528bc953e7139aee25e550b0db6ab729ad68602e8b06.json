{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React_project 2\\\\my-app\\\\src\\\\components\\\\sw-components\\\\item-lists.js\";\nimport React from \"react\";\nimport { withData, withSwapiService, withChildFunction, compose } from \"../hoc-helpers\";\nimport ItemList from \"../item-list\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst renderNameAndGender = ({\n  name,\n  gender\n}) => /*#__PURE__*/_jsxDEV(\"span\", {\n  children: [name, \", \\xA0\", gender]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 5\n}, this);\nconst renderNameAndModel = ({\n  name,\n  model\n}) => /*#__PURE__*/_jsxDEV(\"span\", {\n  children: [name, \", \\xA0\", model]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 11,\n  columnNumber: 5\n}, this);\nconst renderNameAndPopulation = ({\n  name,\n  population\n}) => /*#__PURE__*/_jsxDEV(\"span\", {\n  children: [name, \", \\xA0\", population, \" \", population !== 'unknown' ? 'people' : null]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 14,\n  columnNumber: 5\n}, this);\nconst mapPersonMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllPeople\n  };\n};\nconst mapPlanetMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllPlanets\n  };\n};\nconst mapStarshipMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllStarships\n  };\n};\nconst PersonList = compose(withSwapiService(mapPersonMethodsToProps), withData, withChildFunction(renderNameAndGender))(ItemList);\nconst PlanetList = compose(withSwapiService(mapPlanetMethodsToProps), withData, withChildFunction(renderNameAndPopulation))(ItemList);\nconst StarshipList = compose(withSwapiService(mapStarshipMethodsToProps), withData, withChildFunction(renderNameAndModel))(ItemList);\nexport { PersonList, PlanetList, StarshipList };","map":{"version":3,"names":["React","withData","withSwapiService","withChildFunction","compose","ItemList","jsxDEV","_jsxDEV","renderNameAndGender","name","gender","children","fileName","_jsxFileName","lineNumber","columnNumber","renderNameAndModel","model","renderNameAndPopulation","population","mapPersonMethodsToProps","swapiService","getData","getAllPeople","mapPlanetMethodsToProps","getAllPlanets","mapStarshipMethodsToProps","getAllStarships","PersonList","PlanetList","StarshipList"],"sources":["C:/Users/User/Desktop/React_project 2/my-app/src/components/sw-components/item-lists.js"],"sourcesContent":["import React from \"react\"\r\n\r\nimport { withData, withSwapiService, withChildFunction, compose } from \"../hoc-helpers\"\r\nimport ItemList from \"../item-list\"\r\n\r\n\r\nconst renderNameAndGender = ({name, gender}) =>\r\n    <span>{name}, &nbsp;{gender}</span>\r\n\r\nconst renderNameAndModel = ({ name, model }) =>\r\n    <span>{name}, &nbsp;{model}</span>\r\n\r\nconst renderNameAndPopulation = ({ name, population }) =>\r\n    <span>{name}, &nbsp;{population} {population !== 'unknown' ? 'people' : null}</span>\r\n\r\n\r\nconst mapPersonMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPeople\r\n    }\r\n}\r\nconst mapPlanetMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPlanets\r\n    }\r\n}\r\nconst mapStarshipMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllStarships\r\n    }\r\n}\r\n\r\n\r\nconst PersonList = compose(\r\n    withSwapiService(mapPersonMethodsToProps),\r\n    withData,\r\n    withChildFunction(renderNameAndGender)\r\n)(ItemList)\r\n\r\nconst PlanetList = compose(\r\n    withSwapiService(mapPlanetMethodsToProps),\r\n    withData,\r\n    withChildFunction(renderNameAndPopulation)\r\n)(ItemList)\r\n\r\nconst StarshipList = compose(\r\n    withSwapiService(mapStarshipMethodsToProps),\r\n    withData,\r\n    withChildFunction(renderNameAndModel)\r\n)(ItemList)\r\n\r\n\r\nexport {\r\n    PersonList,\r\n    PlanetList,\r\n    StarshipList\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,EAAEC,gBAAgB,EAAEC,iBAAiB,EAAEC,OAAO,QAAQ,gBAAgB;AACvF,OAAOC,QAAQ,MAAM,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGnC,MAAMC,mBAAmB,GAAGA,CAAC;EAACC,IAAI;EAAEC;AAAM,CAAC,kBACvCH,OAAA;EAAAI,QAAA,GAAOF,IAAI,EAAC,QAAQ,EAACC,MAAM;AAAA;EAAAE,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAO,CAAC;AAEvC,MAAMC,kBAAkB,GAAGA,CAAC;EAAEP,IAAI;EAAEQ;AAAM,CAAC,kBACvCV,OAAA;EAAAI,QAAA,GAAOF,IAAI,EAAC,QAAQ,EAACQ,KAAK;AAAA;EAAAL,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAO,CAAC;AAEtC,MAAMG,uBAAuB,GAAGA,CAAC;EAAET,IAAI;EAAEU;AAAW,CAAC,kBACjDZ,OAAA;EAAAI,QAAA,GAAOF,IAAI,EAAC,QAAQ,EAACU,UAAU,EAAC,GAAC,EAACA,UAAU,KAAK,SAAS,GAAG,QAAQ,GAAG,IAAI;AAAA;EAAAP,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAO,CAAC;AAGxF,MAAMK,uBAAuB,GAAIC,YAAY,IAAK;EAC9C,OAAO;IACHC,OAAO,EAAED,YAAY,CAACE;EAC1B,CAAC;AACL,CAAC;AACD,MAAMC,uBAAuB,GAAIH,YAAY,IAAK;EAC9C,OAAO;IACHC,OAAO,EAAED,YAAY,CAACI;EAC1B,CAAC;AACL,CAAC;AACD,MAAMC,yBAAyB,GAAIL,YAAY,IAAK;EAChD,OAAO;IACHC,OAAO,EAAED,YAAY,CAACM;EAC1B,CAAC;AACL,CAAC;AAGD,MAAMC,UAAU,GAAGxB,OAAO,CACtBF,gBAAgB,CAACkB,uBAAuB,CAAC,EACzCnB,QAAQ,EACRE,iBAAiB,CAACK,mBAAmB,CACzC,CAAC,CAACH,QAAQ,CAAC;AAEX,MAAMwB,UAAU,GAAGzB,OAAO,CACtBF,gBAAgB,CAACsB,uBAAuB,CAAC,EACzCvB,QAAQ,EACRE,iBAAiB,CAACe,uBAAuB,CAC7C,CAAC,CAACb,QAAQ,CAAC;AAEX,MAAMyB,YAAY,GAAG1B,OAAO,CACxBF,gBAAgB,CAACwB,yBAAyB,CAAC,EAC3CzB,QAAQ,EACRE,iBAAiB,CAACa,kBAAkB,CACxC,CAAC,CAACX,QAAQ,CAAC;AAGX,SACIuB,UAAU,EACVC,UAAU,EACVC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export default class SwapiService {\n  constructor() {\n    this._apiBase = 'https://swapi.dev/api';\n    this.getResource = async url => {\n      const res = await fetch(`${this._apiBase}${url}`);\n      if (!res.ok) {\n        throw new Error(`Could not fetch ${url}` + `, received ${res.status}`);\n      }\n      return await res.json();\n    };\n    this.getAllPeople = async () => {\n      const res = await this.getResource(`/people/`);\n      return res.results.map(this._transformPerson);\n    };\n    this.getPerson = async id => {\n      const person = await this.getResource(`/people/${id}/`);\n      return this._transformPerson(person);\n    };\n    this.getAllPlanets = async () => {\n      const res = await this.getResource(`/planets/`);\n      return res.results.map(this._transformPlanet);\n    };\n    this.getPlanet = async id => {\n      const planet = await this.getResource(`/planets/${id}/`);\n      return this._transformPlanet(planet);\n    };\n    this.getAllStarships = async () => {\n      const res = await this.getResource(`/starships/`);\n      return res.results.map(this._transformStarship);\n    };\n    this.getStarship = async id => {\n      const starship = this.getResource(`/starships/${id}/`);\n      return this._transformStarship(starship);\n    };\n    this._transformPlanet = planet => {\n      return {\n        id: this._extractId(planet),\n        name: planet.name,\n        population: planet.population,\n        rotationPeriod: planet.rotation_period,\n        diameter: planet.diameter\n      };\n    };\n    this._transformStarship = starship => {\n      return {\n        id: this._extractId(starship),\n        name: starship.name,\n        model: starship.model,\n        manufacturer: starship.manufacturer,\n        costInCredits: starship.cost_in_credits,\n        length: starship.length,\n        crew: starship.crew,\n        passengers: starship.passengers,\n        cargoCapacity: starship.cargo_capacity\n      };\n    };\n    this._transformPerson = person => {\n      return {\n        id: this._extractId(person),\n        name: person.name,\n        gender: person.gender,\n        birthYear: person.birth_year,\n        eyeColor: person.eye_color\n      };\n    };\n  }\n  _extractId(item) {\n    const idRegExp = /\\/([0-9]*)\\/$/;\n    return item.url.match(idRegExp)[1];\n  }\n}","map":{"version":3,"names":["SwapiService","constructor","_apiBase","getResource","url","res","fetch","ok","Error","status","json","getAllPeople","results","map","_transformPerson","getPerson","id","person","getAllPlanets","_transformPlanet","getPlanet","planet","getAllStarships","_transformStarship","getStarship","starship","_extractId","name","population","rotationPeriod","rotation_period","diameter","model","manufacturer","costInCredits","cost_in_credits","length","crew","passengers","cargoCapacity","cargo_capacity","gender","birthYear","birth_year","eyeColor","eye_color","item","idRegExp","match"],"sources":["C:/Users/User/Desktop/React_project 2/my-app/src/components/services/swapi-service.js"],"sourcesContent":["export default class SwapiService {\r\n\r\n  _apiBase = 'https://swapi.dev/api';\r\n\r\n  getResource = async (url) => {\r\n      const res = await fetch(`${this._apiBase}${url}`);\r\n\r\n      if (!res.ok) {\r\n          throw new Error(`Could not fetch ${url}` +\r\n              `, received ${res.status}`)\r\n      }\r\n      return await res.json();\r\n  }\r\n\r\n  getAllPeople = async () => {\r\n      const res = await this.getResource(`/people/`);\r\n      return res.results.map(this._transformPerson);\r\n  }\r\n\r\n  getPerson = async (id) => {\r\n      const person = await this.getResource(`/people/${id}/`);\r\n      return this._transformPerson(person);\r\n  }\r\n\r\n  getAllPlanets = async () => {\r\n      const res = await this.getResource(`/planets/`);\r\n      return res.results.map(this._transformPlanet);\r\n  }\r\n\r\n  getPlanet = async (id) => {\r\n      const planet = await this.getResource(`/planets/${id}/`);\r\n      return this._transformPlanet(planet);\r\n  }\r\n\r\n  getAllStarships = async () => {\r\n      const res = await this.getResource(`/starships/`);\r\n      return res.results.map(this._transformStarship);\r\n  }\r\n\r\n  getStarship = async (id) => {\r\n      const starship = this.getResource(`/starships/${id}/`);\r\n      return this._transformStarship(starship);\r\n  }\r\n\r\n  _extractId(item) {\r\n      const idRegExp = /\\/([0-9]*)\\/$/;\r\n      return item.url.match(idRegExp)[1];\r\n  }\r\n\r\n  _transformPlanet = (planet) => {\r\n      return {\r\n          id: this._extractId(planet),\r\n          name: planet.name,\r\n          population: planet.population,\r\n          rotationPeriod: planet.rotation_period,\r\n          diameter: planet.diameter\r\n      };\r\n  }\r\n\r\n  _transformStarship = (starship) => {\r\n      return {\r\n          id: this._extractId(starship),\r\n          name: starship.name,\r\n          model: starship.model,\r\n          manufacturer: starship.manufacturer,\r\n          costInCredits: starship.cost_in_credits,\r\n          length: starship.length,\r\n          crew: starship.crew,\r\n          passengers: starship.passengers,\r\n          cargoCapacity: starship.cargo_capacity\r\n      }\r\n  }\r\n\r\n  _transformPerson = (person) => {\r\n      return {\r\n          id: this._extractId(person),\r\n          name: person.name,\r\n          gender: person.gender,\r\n          birthYear: person.birth_year,\r\n          eyeColor: person.eye_color\r\n      }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\React_project 2\\\\my-app\\\\src\\\\components\\\\sw-components\\\\item-lists.js\";\nimport React from \"react\";\nimport { withData } from \"../hoc-helpers\";\nimport ItemList from \"../item-list\";\nimport withSwapiService from \"../hoc-helpers/with-swapi-service\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst withChildFunction = (Wrapped, fn) => {\n  return props => {\n    return /*#__PURE__*/_jsxDEV(Wrapped, {\n      ...props,\n      children: fn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this);\n  };\n};\n\n// Render list instance label\nconst renderNameAndGender = ({\n  name,\n  gender\n}) => /*#__PURE__*/_jsxDEV(\"span\", {\n  children: [name, \", \\xA0\", gender]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 19,\n  columnNumber: 5\n}, this);\nconst renderNameAndModel = ({\n  name,\n  model\n}) => /*#__PURE__*/_jsxDEV(\"span\", {\n  children: [name, \", \\xA0\", model]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 22,\n  columnNumber: 5\n}, this);\nconst renderNameAndPopulation = ({\n  name,\n  population\n}) => /*#__PURE__*/_jsxDEV(\"span\", {\n  children: [name, \", \\xA0\", population, \" \", population !== 'unknown' ? 'people' : null]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 25,\n  columnNumber: 5\n}, this);\n\n// Transform methods\nconst mapPersonMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllPeople\n  };\n};\nconst mapPlanetMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllPlanets\n  };\n};\nconst mapStarshipMethodsToProps = swapiService => {\n  return {\n    getData: swapiService.getAllStarships\n  };\n};\n\n// Forming lists\nconst PersonList = withSwapiService(_c2 = withData(_c = withChildFunction(ItemList, renderNameAndGender)), mapPersonMethodsToProps);\n_c3 = PersonList;\nconst PlanetList = withSwapiService(_c5 = withData(_c4 = withChildFunction(ItemList, renderNameAndPopulation)), mapPlanetMethodsToProps);\n_c6 = PlanetList;\nconst StarshipList = withSwapiService(_c8 = withData(_c7 = withChildFunction(ItemList, renderNameAndModel)), mapStarshipMethodsToProps);\n_c9 = StarshipList;\nexport { PersonList, PlanetList, StarshipList };\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"PersonList$withSwapiService$withData\");\n$RefreshReg$(_c2, \"PersonList$withSwapiService\");\n$RefreshReg$(_c3, \"PersonList\");\n$RefreshReg$(_c4, \"PlanetList$withSwapiService$withData\");\n$RefreshReg$(_c5, \"PlanetList$withSwapiService\");\n$RefreshReg$(_c6, \"PlanetList\");\n$RefreshReg$(_c7, \"StarshipList$withSwapiService$withData\");\n$RefreshReg$(_c8, \"StarshipList$withSwapiService\");\n$RefreshReg$(_c9, \"StarshipList\");","map":{"version":3,"names":["React","withData","ItemList","withSwapiService","jsxDEV","_jsxDEV","withChildFunction","Wrapped","fn","props","children","fileName","_jsxFileName","lineNumber","columnNumber","renderNameAndGender","name","gender","renderNameAndModel","model","renderNameAndPopulation","population","mapPersonMethodsToProps","swapiService","getData","getAllPeople","mapPlanetMethodsToProps","getAllPlanets","mapStarshipMethodsToProps","getAllStarships","PersonList","_c2","_c","_c3","PlanetList","_c5","_c4","_c6","StarshipList","_c8","_c7","_c9","$RefreshReg$"],"sources":["C:/Users/User/Desktop/React_project 2/my-app/src/components/sw-components/item-lists.js"],"sourcesContent":["import React from \"react\"\r\n\r\nimport { withData } from \"../hoc-helpers\"\r\nimport ItemList from \"../item-list\"\r\nimport withSwapiService from \"../hoc-helpers/with-swapi-service\"\r\n\r\nconst withChildFunction = (Wrapped, fn) => {\r\n    return (props) => {\r\n        return (\r\n            <Wrapped { ...props }>\r\n                { fn }\r\n            </Wrapped>\r\n        )\r\n    }\r\n}\r\n\r\n// Render list instance label\r\nconst renderNameAndGender = ({name, gender}) =>\r\n    <span>{name}, &nbsp;{gender}</span>\r\n\r\nconst renderNameAndModel = ({ name, model }) =>\r\n    <span>{name}, &nbsp;{model}</span>\r\n\r\nconst renderNameAndPopulation = ({ name, population }) =>\r\n    <span>{name}, &nbsp;{population} {population !== 'unknown' ? 'people' : null}</span>\r\n\r\n// Transform methods\r\nconst mapPersonMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPeople\r\n    }\r\n}\r\nconst mapPlanetMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllPlanets\r\n    }\r\n}\r\nconst mapStarshipMethodsToProps = (swapiService) => {\r\n    return {\r\n        getData: swapiService.getAllStarships\r\n    }\r\n}\r\n\r\n// Forming lists\r\nconst PersonList = withSwapiService(\r\n    withData(withChildFunction(ItemList, renderNameAndGender)),\r\n    mapPersonMethodsToProps\r\n)\r\nconst PlanetList = withSwapiService(\r\n    withData(withChildFunction(ItemList, renderNameAndPopulation)),\r\n    mapPlanetMethodsToProps\r\n)\r\nconst StarshipList = withSwapiService(\r\n    withData(withChildFunction(ItemList, renderNameAndModel)),\r\n    mapStarshipMethodsToProps\r\n)\r\n\r\nexport {\r\n    PersonList,\r\n    PlanetList,\r\n    StarshipList\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}